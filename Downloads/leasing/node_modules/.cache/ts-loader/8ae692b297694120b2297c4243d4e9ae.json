{"remainingRequest":"/home/tamanna/htdocs/carconfiguratorfrontend/node_modules/babel-loader/lib/index.js!/home/tamanna/htdocs/carconfiguratorfrontend/node_modules/ts-loader/index.js??ref--14-2!/home/tamanna/htdocs/carconfiguratorfrontend/node_modules/eslint-loader/index.js??ref--13-0!/home/tamanna/htdocs/carconfiguratorfrontend/src/store/users/actions.ts","dependencies":[{"path":"/home/tamanna/htdocs/carconfiguratorfrontend/src/store/users/actions.ts","mtime":1678204643798},{"path":"/home/tamanna/htdocs/carconfiguratorfrontend/node_modules/cache-loader/dist/cjs.js","mtime":1691610247617},{"path":"/home/tamanna/htdocs/carconfiguratorfrontend/node_modules/babel-loader/lib/index.js","mtime":1691610247572},{"path":"/home/tamanna/htdocs/carconfiguratorfrontend/node_modules/ts-loader/index.js","mtime":1691610259533},{"path":"/home/tamanna/htdocs/carconfiguratorfrontend/node_modules/eslint-loader/index.js","mtime":1691610259081}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/tamanna/htdocs/carconfiguratorfrontend/node_modules/eslint-loader/index.js??ref--13-0!/home/tamanna/htdocs/carconfiguratorfrontend/src/store/users/actions.ts"],"names":[],"mappings":"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","sourcesContent":["import { ActionContext, ActionTree } from 'vuex'\nimport { Mutations, MutationTypes } from './mutations'\nimport { State } from './index'\nimport type { State as RootState } from '@/store'\nimport { userQuery, employeeUserResponseType } from '@/types'\nimport router from '@/router'\nimport authApi from '@/api/Auth'\n\nexport enum UsersActionTypes {\n    GET_ALLUSERS = 'GET_ALLUSERS',\n    ADD_USER = 'ADD_USER',\n    GET_USERBYID = 'GET_USERBYID',\n    UPDATE_USERBYID = 'UPDATE_USERBYID',\n    DELETE_USERBYID = 'DELETE_USERBYID',\n    RESTORE_USERBYID = 'RESTORE_USERBYID'\n}\n\ntype AugmentedActionContext = {\n    commit<K extends keyof Mutations>(key: K, payload: Parameters<Mutations[K]>[1]): ReturnType<Mutations[K]>;\n} & Omit<ActionContext<State, RootState>, 'commit'>\n\nexport interface Actions {\n    [UsersActionTypes.GET_ALLUSERS]({ commit }: AugmentedActionContext, payload: userQuery ): void;\n    [UsersActionTypes.ADD_USER]({ commit }: AugmentedActionContext, payload: { companyId: number; body: employeeUserResponseType; lang: string }): void;\n    [UsersActionTypes.GET_USERBYID]({ commit }: AugmentedActionContext, payload: { companyId: number; userId: number }): void;\n    [UsersActionTypes.UPDATE_USERBYID]({ commit }: AugmentedActionContext, payload: { companyId: number; userId: number; body: employeeUserResponseType }): void;\n    [UsersActionTypes.DELETE_USERBYID]({ commit }: AugmentedActionContext, payload: { companyId: number; userId: number }): void;\n    [UsersActionTypes.RESTORE_USERBYID]({ commit }: AugmentedActionContext, payload: { companyId: number; userId: number }): void;\n}\n\nexport const actions: ActionTree<State, RootState> & Actions = {\n    async [UsersActionTypes.GET_ALLUSERS]({ commit }, data) {\n        commit(MutationTypes.SET_LOADER, true)\n        const res = await authApi.getAllUsers(data.companyId, data.query)\n        if (res)\n            commit(MutationTypes.SET_ALLUSERS, res.userResponse)\n            commit(MutationTypes.SET_TOTALUSERS, res.totalRecords)\n        commit(MutationTypes.SET_LOADER, false)\n    },\n    async [UsersActionTypes.ADD_USER]({ commit }, data) {\n        commit(MutationTypes.SET_LOADER, true)\n        const res = await authApi.addUser(data.companyId, data.body, data.lang)\n        if (res.status == 'success') {\n            router.push({ name: 'Employees', query: { page: 1 } })\n        } else if (res.status != 'success') {\n            commit(MutationTypes.SET_USER_ERROR, res.userResponse)\n        } \n        commit(MutationTypes.SET_LOADER, false)\n    },\n    async [UsersActionTypes.GET_USERBYID]({ commit }, data) {\n        commit(MutationTypes.SET_USERBYIDLOADER, true)\n        const res = await authApi.getUserById(data.companyId, data.userId)\n        commit(MutationTypes.SET_ORDERED_CAR, res.userResponse[0]['carOrders'])\n        commit(MutationTypes.SET_USERBYID, res.userResponse[0])\n        commit(MutationTypes.SET_USERBYIDLOADER, false)\n    },\n    async [UsersActionTypes.UPDATE_USERBYID]({ commit }, data) {\n        commit(MutationTypes.SET_USERBYIDLOADER, true)\n        const res = await authApi.updateUserById(data.companyId, data.userId, data.body)\n        if (res.status == 'success') {\n            router.push({ name: 'Employees', query: { page: 1 } })\n            commit(MutationTypes.SET_ISUSERUPDATED, true)\n        } else if (res.status != 'success') {\n            commit(MutationTypes.SET_USER_ERROR, res.userResponse)\n        }\n        commit(MutationTypes.SET_USERBYIDLOADER, false)\n    },\n    async [UsersActionTypes.DELETE_USERBYID]({ commit }, data) {\n        commit(MutationTypes.SET_USERBYIDLOADER, true)\n        const res = await authApi.deleteUserById(data.companyId, data.userId)\n        if (res.status == 'success') {\n            router.push({ name: 'Employees', query: { page: 1 } })\n        } else if (res.status == 'warning' || res.status == 'error') {\n            commit(MutationTypes.SET_DELETEUSERBYIDRESPONSE, res.userResponse)\n        }\n        commit(MutationTypes.SET_USERBYIDLOADER, false)\n    },\n    async [UsersActionTypes.RESTORE_USERBYID]({ commit }, data) {\n        commit(MutationTypes.SET_USERBYIDLOADER, true)\n        const res  = await authApi.restoreUserById(data.companyId,  data.userId)\n        if (res.status == 'success') {\n            router.push({ name: 'Employees', query: { page: 1 } })\n        } else if (res.status == 'warning' || res.status == 'error') {\n            commit(MutationTypes.SET_DELETEUSERBYIDRESPONSE, res.userResponse)\n        }\n        commit(MutationTypes.SET_USERBYIDLOADER, false)\n    }\n}\n\n"],"sourceRoot":""}]}