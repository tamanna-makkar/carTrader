{"remainingRequest":"/home/tamanna/htdocs/carconfiguratorfrontend/node_modules/babel-loader/lib/index.js!/home/tamanna/htdocs/carconfiguratorfrontend/node_modules/ts-loader/index.js??ref--14-2!/home/tamanna/htdocs/carconfiguratorfrontend/node_modules/eslint-loader/index.js??ref--13-0!/home/tamanna/htdocs/carconfiguratorfrontend/src/store/userCars/actions.ts","dependencies":[{"path":"/home/tamanna/htdocs/carconfiguratorfrontend/src/store/userCars/actions.ts","mtime":1691610165536},{"path":"/home/tamanna/htdocs/carconfiguratorfrontend/node_modules/cache-loader/dist/cjs.js","mtime":1691610247617},{"path":"/home/tamanna/htdocs/carconfiguratorfrontend/node_modules/babel-loader/lib/index.js","mtime":1691610247572},{"path":"/home/tamanna/htdocs/carconfiguratorfrontend/node_modules/ts-loader/index.js","mtime":1691610259533},{"path":"/home/tamanna/htdocs/carconfiguratorfrontend/node_modules/eslint-loader/index.js","mtime":1691610259081}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/tamanna/htdocs/carconfiguratorfrontend/node_modules/eslint-loader/index.js??ref--13-0!/home/tamanna/htdocs/carconfiguratorfrontend/src/store/userCars/actions.ts"],"names":[],"mappings":"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","sourcesContent":["import { ActionContext, ActionTree } from 'vuex'\nimport { Mutations, MutationTypes } from './mutations'\nimport { MutationTypes as OptionsMutationsTypes } from '../options/mutations'\nimport { State } from './index'\nimport type { State as RootState } from '@/store'\nimport authApi from '@/api/Auth'\nimport { carOrderBody, savedCarsType, userQueryType } from '@/types'\nimport { VueCookieNext } from 'vue-cookie-next'\nimport { store } from '@/store'\nexport enum ActionTypes {\n  GET_ALLSAVEDCARS = 'GET_ALLSAVEDCARS',\n  GET_CAR_ORDER_DETAILS = 'GET_CAR_ORDER_DETAILS',\n  DELETE_SAVED_CAR = 'DELETE_SAVED_CAR',\n  SAVE_CAR_ORDER = 'SAVE_CAR_ORDER'\n\n}\n\ntype AugmentedActionContext = {\n  commit<K extends keyof Mutations>(key: K, payload: Parameters<Mutations[K]>[1]): ReturnType<Mutations[K]>;\n} & Omit<ActionContext<State, RootState>, 'commit'>\n\n\nexport interface Actions {\n  [ActionTypes.GET_ALLSAVEDCARS]({ commit }: AugmentedActionContext, payload: userQueryType): void;\n  [ActionTypes.GET_CAR_ORDER_DETAILS]({ commit }: AugmentedActionContext, payload: number[]): void;\n  [ActionTypes.DELETE_SAVED_CAR]({ commit }: AugmentedActionContext, payload: number[]): void;\n  [ActionTypes.SAVE_CAR_ORDER]({ commit }: AugmentedActionContext, payload: carOrderBody): void;\n}\n\nexport const actions: ActionTree<State, RootState> & Actions = {\n\n  async [ActionTypes.GET_ALLSAVEDCARS]({ commit }, params ) {\n    commit(MutationTypes.SET_LOADER, true)\n    const res = await authApi.getAllSavedCars(params)\n    if (typeof res.carOrderResponse !== 'string' && res.carOrderResponse && res.carOrderResponse.length > 0) {\n      const newArr = res.carOrderResponse.filter((e: savedCarsType) => {\n        if (e && e.id) {\n          return e\n        }\n      })\n      commit(MutationTypes.SET_SAVEDCARSRESPONSE, newArr)\n      commit(MutationTypes.SET_SAVED_CARS, newArr)\n    }\n    commit(MutationTypes.SET_LOADER, false)\n  },\n\n  async [ActionTypes.GET_CAR_ORDER_DETAILS]({ commit }, payload) {\n    commit(MutationTypes.SET_LOADER, true)\n    const allCarsPromise = payload.map(async (e) => {\n      return authApi.getCarOrderDetails(e)\n    })\n    const allCarsResponse = await Promise.all(allCarsPromise)\n    allCarsResponse.map((e) => {\n      return e.carOrderResponse\n    })\n    commit(MutationTypes.SET_COMPARE_CARS, allCarsResponse)\n    commit(MutationTypes.SET_LOADER, false)\n  },\n\n  async [ActionTypes.SAVE_CAR_ORDER]({ commit, state }, payload) {\n    commit(MutationTypes.SET_LOADER, true)\n    try {\n      const vehicleIdWithoutYear = payload.vehicleId.toString().substring(0, payload.vehicleId.toString().length - 8)\n      const savedCarsIds = [...state.savedCarsIds]\n      savedCarsIds.push(vehicleIdWithoutYear)\n      commit(MutationTypes.SET_SAVED_CARS_IDS, savedCarsIds)\n      const res = await authApi.saveCarOrder(payload)\n      commit(MutationTypes.SET_LOADER, false)\n      let complyResponse: string[] = []\n      //Manually adding message when expensiveFlag = true  \n      if (res.complyCarResponse && res.complyCarResponse.expensiveFlag) {\n        complyResponse.push('Car is too expensive')\n      }\n      // Adding error messages to the array to show popup\n      if (res.complyCarResponse && res.complyCarResponse.complyErrors && res.complyCarResponse.complyErrors.length > 0) {\n        complyResponse = [...complyResponse, ...res.complyCarResponse.complyErrors]\n      }\n\n      store.commit(OptionsMutationsTypes.SET_COMPLYCARRESPONSE, complyResponse)\n      if (res.status == 'success') {\n        const savedCars = [...state.userCars]\n        savedCars.push(res.carOrderResponse)\n        commit(MutationTypes.SET_SAVEDCARSRESPONSE, savedCars)\n        commit(MutationTypes.SET_SAVED_CARS, savedCars)\n        VueCookieNext.setCookie(\"latestcarOrderId\", JSON.stringify(res.carOrderResponse.id))\n      } else {\n        const addedCarIndex = state.savedCarsIds.findIndex((e) => e === vehicleIdWithoutYear)\n        if (addedCarIndex !== -1) {\n          const savedCarsIds: string[] = [...state.savedCarsIds]\n          savedCarsIds.splice(addedCarIndex, 1)\n          savedCarsIds\n          commit(MutationTypes.SET_SAVED_CARS_IDS, savedCarsIds)\n        }\n      }\n\n      return res\n    } catch (error) {\n      commit(MutationTypes.SET_LOADER, false)\n    }\n  },\n\n\n  async [ActionTypes.DELETE_SAVED_CAR]({ commit }, payload) {\n    commit(MutationTypes.SET_LOADER, true)\n    const allCarsPromise = payload.map(async (e) => {\n      return authApi.deleteSavedOrderCar(e)\n    })\n    Promise.all(allCarsPromise)\n    commit(MutationTypes.DELETE_SAVED_CARS, payload)\n    commit(MutationTypes.SET_LOADER, false)\n  }\n\n}\n\n"],"sourceRoot":""}]}