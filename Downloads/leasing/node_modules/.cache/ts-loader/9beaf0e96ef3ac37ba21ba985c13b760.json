{"remainingRequest":"/home/tamanna/htdocs/carconfiguratorfrontend/node_modules/babel-loader/lib/index.js!/home/tamanna/htdocs/carconfiguratorfrontend/node_modules/ts-loader/index.js??ref--14-2!/home/tamanna/htdocs/carconfiguratorfrontend/node_modules/eslint-loader/index.js??ref--13-0!/home/tamanna/htdocs/carconfiguratorfrontend/src/store/company/mutations.ts","dependencies":[{"path":"/home/tamanna/htdocs/carconfiguratorfrontend/src/store/company/mutations.ts","mtime":1678204643798},{"path":"/home/tamanna/htdocs/carconfiguratorfrontend/node_modules/cache-loader/dist/cjs.js","mtime":1691610247617},{"path":"/home/tamanna/htdocs/carconfiguratorfrontend/node_modules/babel-loader/lib/index.js","mtime":1691610247572},{"path":"/home/tamanna/htdocs/carconfiguratorfrontend/node_modules/ts-loader/index.js","mtime":1691610259533},{"path":"/home/tamanna/htdocs/carconfiguratorfrontend/node_modules/eslint-loader/index.js","mtime":1691610259081}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tICIvaG9tZS90YW1hbm5hL2h0ZG9jcy9jYXJjb25maWd1cmF0b3Jmcm9udGVuZC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHkiOwoKdmFyIF9tdXRhdGlvbnM7CgpleHBvcnQgdmFyIE11dGF0aW9uVHlwZXM7CgooZnVuY3Rpb24gKE11dGF0aW9uVHlwZXMpIHsKICBNdXRhdGlvblR5cGVzWyJTRVRfTE9BREVSIl0gPSAiU0VUX0xPQURFUiI7CiAgTXV0YXRpb25UeXBlc1siU0VUX0NPTVBBTllCWUlEIl0gPSAiU0VUX0NPTVBBTllCWUlEIjsKICBNdXRhdGlvblR5cGVzWyJTRVRfSVNDT01QQU5ZVVBEQVRFRCJdID0gIlNFVF9JU0NPTVBBTllVUERBVEVEIjsKICBNdXRhdGlvblR5cGVzWyJTRVRfTE9HT0VSUk9SIl0gPSAiU0VUX0xPR09FUlJPUiI7Cn0pKE11dGF0aW9uVHlwZXMgfHwgKE11dGF0aW9uVHlwZXMgPSB7fSkpOwoKZXhwb3J0IHZhciBtdXRhdGlvbnMgPSAoX211dGF0aW9ucyA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX211dGF0aW9ucywgTXV0YXRpb25UeXBlcy5TRVRfTE9BREVSLCBmdW5jdGlvbiAoc3RhdGUsIHBheWxvYWQpIHsKICBzdGF0ZS5sb2FkZXIgPSBwYXlsb2FkOwp9KSwgX2RlZmluZVByb3BlcnR5KF9tdXRhdGlvbnMsIE11dGF0aW9uVHlwZXMuU0VUX0NPTVBBTllCWUlELCBmdW5jdGlvbiAoc3RhdGUsIHBheWxvYWQpIHsKICBzdGF0ZS5nZXRDb21wYW55QnlJZCA9IHBheWxvYWQ7Cn0pLCBfZGVmaW5lUHJvcGVydHkoX211dGF0aW9ucywgTXV0YXRpb25UeXBlcy5TRVRfSVNDT01QQU5ZVVBEQVRFRCwgZnVuY3Rpb24gKHN0YXRlLCBwYXlsb2FkKSB7CiAgc3RhdGUuaXNDb21wYW55VXBkYXRlZCA9IHBheWxvYWQ7Cn0pLCBfZGVmaW5lUHJvcGVydHkoX211dGF0aW9ucywgTXV0YXRpb25UeXBlcy5TRVRfTE9HT0VSUk9SLCBmdW5jdGlvbiAoc3RhdGUsIHBheWxvYWQpIHsKICBzdGF0ZS5sb2dvRXJyb3IgPSBwYXlsb2FkOwp9KSwgX211dGF0aW9ucyk7"},{"version":3,"sources":["/home/tamanna/htdocs/carconfiguratorfrontend/node_modules/eslint-loader/index.js??ref--13-0!/home/tamanna/htdocs/carconfiguratorfrontend/src/store/company/mutations.ts"],"names":[],"mappings":";;;;AAIA,OAAA,IAAY,aAAZ;;AAAA,CAAA,UAAY,aAAZ,EAAyB;AACrB,EAAA,aAAA,CAAA,YAAA,CAAA,GAAA,YAAA;AACA,EAAA,aAAA,CAAA,iBAAA,CAAA,GAAA,iBAAA;AACA,EAAA,aAAA,CAAA,sBAAA,CAAA,GAAA,sBAAA;AACA,EAAA,aAAA,CAAA,eAAA,CAAA,GAAA,eAAA;AACH,CALD,EAAY,aAAa,KAAb,aAAa,GAAA,EAAA,CAAzB;;AAcA,OAAO,IAAM,SAAS,iDACjB,aAAa,CAAC,UADG,YACS,KADT,EACgB,OADhB,EACuB;AACrC,EAAA,KAAK,CAAC,MAAN,GAAe,OAAf;AACH,CAHiB,+BAIjB,aAAa,CAAC,eAJG,YAIc,KAJd,EAIqB,OAJrB,EAI4B;AAC1C,EAAA,KAAK,CAAC,cAAN,GAAuB,OAAvB;AACH,CANiB,+BAOjB,aAAa,CAAC,oBAPG,YAOmB,KAPnB,EAO0B,OAP1B,EAOiC;AAC/C,EAAA,KAAK,CAAC,gBAAN,GAAyB,OAAzB;AACH,CATiB,+BAUjB,aAAa,CAAC,aAVG,YAUY,KAVZ,EAUmB,OAVnB,EAU0B;AACxC,EAAA,KAAK,CAAC,SAAN,GAAkB,OAAlB;AACH,CAZiB,cAAf","sourcesContent":["import { MutationTree } from 'vuex'\nimport { State } from './index'\nimport { companyResponseType } from '@/types'\n\nexport enum MutationTypes {\n    SET_LOADER = 'SET_LOADER',\n    SET_COMPANYBYID = 'SET_COMPANYBYID',\n    SET_ISCOMPANYUPDATED = 'SET_ISCOMPANYUPDATED',\n    SET_LOGOERROR = 'SET_LOGOERROR',\n}\n\nexport type Mutations<S = State> = {\n    [MutationTypes.SET_LOADER](state: S, payload: boolean): void;\n    [MutationTypes.SET_COMPANYBYID](state: S, payload: companyResponseType): void;\n    [MutationTypes.SET_ISCOMPANYUPDATED](state: S, payload: boolean): void;\n    [MutationTypes.SET_LOGOERROR](state: S, payload: string): void;\n}\n\nexport const mutations: MutationTree<State> & Mutations = {\n    [MutationTypes.SET_LOADER](state, payload) {\n        state.loader = payload\n    },\n    [MutationTypes.SET_COMPANYBYID](state, payload) {\n        state.getCompanyById = payload\n    },\n    [MutationTypes.SET_ISCOMPANYUPDATED](state, payload) {\n        state.isCompanyUpdated = payload\n    },\n    [MutationTypes.SET_LOGOERROR](state, payload) {\n        state.logoError = payload\n    }\n}\n"],"sourceRoot":""}]}