{"remainingRequest":"/home/tamanna/htdocs/carconfiguratorfrontend/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/home/tamanna/htdocs/carconfiguratorfrontend/src/components/UserProfile/AccountDetails.vue?vue&type=style&index=0&id=9a6a1514&lang=sass&scoped=true","dependencies":[{"path":"/home/tamanna/htdocs/carconfiguratorfrontend/src/components/UserProfile/AccountDetails.vue","mtime":1691610165528},{"path":"/home/tamanna/htdocs/carconfiguratorfrontend/node_modules/css-loader/dist/cjs.js","mtime":1691610261655},{"path":"/home/tamanna/htdocs/carconfiguratorfrontend/node_modules/vue-loader-v16/dist/stylePostLoader.js","mtime":1691610261934},{"path":"/home/tamanna/htdocs/carconfiguratorfrontend/node_modules/postcss-loader/src/index.js","mtime":1691610261845},{"path":"/home/tamanna/htdocs/carconfiguratorfrontend/node_modules/sass-loader/dist/cjs.js","mtime":1691610266130},{"path":"/home/tamanna/htdocs/carconfiguratorfrontend/node_modules/cache-loader/dist/cjs.js","mtime":1691610247617},{"path":"/home/tamanna/htdocs/carconfiguratorfrontend/node_modules/vue-loader-v16/dist/index.js","mtime":1691610261934}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CkBpbXBvcnQgJ3Nhc3MvYWxsLnNhc3MnCi5sb2FkZXItYmxvY2sKICBkaXNwbGF5OiBmbGV4CiAgZmxleDogMQogIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kCi5kcml2ZXItYWNjb3VudAoucmlnaHQtYXJlYQogIC5kZXRhaWxzLWlubmVyLXdyYXAKICAgIG1hcmdpbjogMCAwIDNlbSAwCiAgICBoMgogICAgICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAkbWRCcmVha3BvaW50KQogICAgICAgIG1hcmdpbjogMS40ZW0gMCAxLjRlbSAwCiAgICAuY29tcGFueS1pbmZvLXdyYXAKICAgICAgLmxlZnQtYmxvY2sKICAgICAgICBmbGV4OiAyCiAgICAgICAgLmNvbXBhbnktaW5mbwogICAgICAgICAgLnJvdwogICAgICAgICAgICAuaGFsZi13aWR0aAogICAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZQogICAgICAgICAgICAgIG1hcmdpbi1yaWdodDogNSUKICAgICAgICAgICAgICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAkbWRCcmVha3BvaW50KQogICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMmVtCiAgICAgICAgICAgICAgbGFiZWwKICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMTRweAogICAgICAgICAgICAgICAgY29sb3I6ICRjb2xvckh1YmJsZURhcmtHcmV5CiAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4CiAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAwLjRlbQogICAgICAgICAgICAgIC5kcm9wZG93bgogICAgICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IDAKICAgIC5sZWFzZS1zZWN0aW9uCiAgICAgIHBhZGRpbmctYm90dG9tOiAzLjVlbQogICAgLnVwZGF0ZS1wYXNzd29yZC1zZWN0aW9uCiAgICBAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAkbWRCcmVha3BvaW50KQogICAgICBwYWRkaW5nOiAwIDNlbSA1ZW0gM2VtCiAgICAgIC5oYWxmLXdpZHRoCiAgICAgICAgd2lkdGg6IDQ1JQogICAgLmNvbXBhbnktaW5mby13cmFwCiAgICAgIEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6ICRtZEJyZWFrcG9pbnQpCiAgICAgICAgbWFyZ2luOiAwIDAgMmVtIDAKLmdyZWVuLXRleHQKICBjb2xvcjogJGNvbG9ySHViYmxlRGFya0dyZWVuCiAgZm9udC1zaXplOiAxNHB4CiAgbWFyZ2luLXRvcDogMiUKLmVycm9yLWJsb2NrCiAgcG9zaXRpb246IHJlbGF0aXZlCiAgY29sb3I6IHJlZAogIG1hcmdpbjogMXJlbSAwCiAgZm9udC1zaXplOiAxNHB4Ci53aWRlCiAgd2lkdGg6IG1heC1jb250ZW50Cg=="},{"version":3,"sources":["/home/tamanna/htdocs/carconfiguratorfrontend/src/components/UserProfile/AccountDetails.vue"],"names":[],"mappings":"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","file":"/home/tamanna/htdocs/carconfiguratorfrontend/src/components/UserProfile/AccountDetails.vue","sourceRoot":"","sourcesContent":["<template>\n  <div v-if=\"!loader\">\n    <div class=\"details-inner-wrap\">\n      <h2>{{ $t('_DriverAccount.myProfile') }}</h2>\n      <div class=\"company-info-wrap\">\n        <div class=\"left-block\">\n          <div class=\"company-info\">\n            <div class=\"row\">\n              <div class=\"half-width\">\n                <InputElement type=\"text\" :value=\"user['name']\" :readonly=\"true\">{{\n                  $t(`_DriverAccount.name`)\n                }}</InputElement>\n              </div>\n              <div class=\"half-width\">\n                <InputElement type=\"text\" :value=\"user['email']\" :readonly=\"true\">{{\n                  $t(`_DriverAccount.emailAddress`)\n                }}</InputElement>\n              </div>\n            </div>\n            <div class=\"row\">\n              <div class=\"half-width\">\n                <InputElement\n                  type=\"text\"\n                  :value=\"user['userStatus'] ? $t(`_employees.${user['userStatus']}`) : '-'\"\n                  :readonly=\"true\"\n                  >{{ $t(`_DriverAccount.userStatus`) }}</InputElement\n                >\n              </div>\n              <div class=\"half-width\">\n                <InputElement type=\"text\" :value=\"user['employeeNumber']\" :readonly=\"true\">{{\n                  $t(`_DriverAccount.employeeNo`)\n                }}</InputElement>\n              </div>\n            </div>\n            <div v-if=\"!adminClientRole\" class=\"row\">\n              <div class=\"half-width\">\n                <label>{{ $t(`_DriverAccount.privateUseOfCar`) }}</label>\n                <Dropdown\n                  :items=\"useOfCarOptions\"\n                  :selectedOption=\"user['privateUse'] == false ? $t('_DriverAccount.no') : $t('_DriverAccount.yes')\"\n                  @onChange=\"selectUseOfCarOption\"\n                />\n                <p v-if=\"privateUserMessageVisible\" class=\"green-text\">\n                  {{ $t('_generalTerms.saveChangesMessage') }}\n                </p>\n              </div>\n              <div class=\"half-width\">\n                <label>{{ $t(`_DriverAccount.taxPercentage`) }}</label>\n                <Dropdown\n                  :items=\"incomeTaxPercentages\"\n                  :selectedOption=\"selectedIncomeTaxPercentage\"\n                  @onChange=\"selectPercentage\"\n                />\n                <p v-if=\"taxMessageVisible\" class=\"green-text\">\n                  {{ $t('_generalTerms.saveChangesMessage') }}\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div class=\"right-block\">\n          <div class=\"grey-area\">\n            <p>{{ $t('_DriverAccount.myProfileInfo') }}</p>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"details-inner-wrap\">\n      <h2>{{ $t('_DriverAccount.contactInfo') }}</h2>\n      <div class=\"company-info-wrap\">\n        <div class=\"left-block\">\n          <div class=\"company-info\">\n            <div class=\"row\">\n              <div class=\"half-width\">\n                <InputElement type=\"text\" :value=\"user['street']\" :readonly=\"true\">{{\n                  $t(`_DriverAccount.streetName`)\n                }}</InputElement>\n              </div>\n              <div class=\"half-width\">\n                <InputElement type=\"text\" :value=\"user['houseNumber']\" :readonly=\"true\">{{\n                  $t(`_DriverAccount.houseNumber`)\n                }}</InputElement>\n              </div>\n            </div>\n            <div class=\"row\">\n              <div class=\"half-width\">\n                <InputElement type=\"text\" :value=\"user['postalCode']\" :readonly=\"true\">{{\n                  $t(`_DriverAccount.postalCode`)\n                }}</InputElement>\n              </div>\n              <div class=\"half-width\">\n                <InputElement type=\"text\" :value=\"user['city']\" :readonly=\"true\">{{\n                  $t(`_DriverAccount.city`)\n                }}</InputElement>\n              </div>\n            </div>\n            <div class=\"row\">\n              <div class=\"half-width\">\n                <InputElement type=\"text\" :value=\"user['phoneNumber']\" :readonly=\"true\">{{\n                  $t(`_DriverAccount.phoneNumber`)\n                }}</InputElement>\n              </div>\n              <div class=\"half-width\"></div>\n            </div>\n          </div>\n        </div>\n        <div class=\"right-block\">\n          <div class=\"grey-area\">\n            <p>{{ $t('_DriverAccount.myContactInfo') }}</p>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"details-inner-wrap lease-section\">\n      <h2>{{ $t('_DriverAccount.leaseCar') }}</h2>\n      <div class=\"company-info-wrap\">\n        <div class=\"left-block\">\n          <div class=\"company-info\">\n            <div class=\"row\">\n              <div class=\"half-width\">\n                <InputElement\n                  type=\"text\"\n                  :value=\"\n                    user['leaseValidUntil'] ? user['leaseValidUntil'].split(' ')[0].split('-').reverse().join('-') : '-'\n                  \"\n                  :readonly=\"true\"\n                  >{{ $t(`_DriverAccount.currentLeaseEndDate`) }}</InputElement\n                >\n              </div>\n              <div class=\"half-width\">\n                <InputElement\n                  type=\"text\"\n                  :value=\"user['licensePlate'] && user['licensePlate'].length > 0 ? user['licensePlate'] : '-'\"\n                  :readonly=\"true\"\n                  >{{ $t(`_DriverAccount.numberPlate`) }}</InputElement\n                >\n              </div>\n            </div>\n          </div>\n        </div>\n        <div class=\"right-block\">\n          <div class=\"grey-area\">\n            <p>{{ $t('_DriverAccount.myContactInfo') }}</p>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"details-inner-wrap update-password-section\">\n      <h2>{{ $t('_companyDetails.updatePassword') }}</h2>\n      <div class=\"company-info-wrap\">\n        <div class=\"left-block\">\n          <div class=\"company-info\">\n            <div class=\"row\">\n              <div class=\"half-width\">\n                <InputElement\n                  type=\"password\"\n                  :value=\"passwordFields['oldPassword']\"\n                  @update:value=\"updateExistingPassword\"\n                  >{{ $t(`_companyDetails.existingPassword`) }}</InputElement\n                >\n                <span v-if=\"passwordErrors.emptyPassword\" class=\"error-message\">\n                  {{ $t('_errorCodes.requiredError') }}\n                </span>\n              </div>\n            </div>\n            <div class=\"row\">\n              <div class=\"half-width\">\n                <InputElement\n                  type=\"password\"\n                  :value=\"passwordFields['newPassword']\"\n                  @update:value=\"updateNewPassword\"\n                  >{{ $t(`_companyDetails.enterNewPassword`) }}</InputElement\n                >\n                <span v-if=\"passwordErrors.emptyNewPassword\" class=\"error-message\">\n                  {{ $t('_errorCodes.requiredError') }}\n                </span>\n                <span v-else-if=\"passwordErrors.invalidPassword\" class=\"error-message wide\">\n                  {{ $t('_errorCodes.invalidPassword') }}\n                </span>\n              </div>\n            </div>\n            <div class=\"row\">\n              <div class=\"half-width\">\n                <InputElement\n                  type=\"password\"\n                  :value=\"passwordFields['confirmPassword']\"\n                  @update:value=\"updateRepeatNewPassword\"\n                  >{{ $t(`_companyDetails.repeatNewPassword`) }}</InputElement\n                >\n                <span v-if=\"passwordErrors.emptyConfirmPassword\" class=\"error-message\">\n                  {{ $t('_errorCodes.requiredError') }}\n                </span>\n                <span v-else-if=\"passwordErrors.confirmPasswordSame\" class=\"error-message\">\n                  {{ $t('_errorCodes.sameConfirmPassword') }}\n                </span>\n              </div>\n            </div>\n            <div class=\"error-block\">\n              <span v-for=\"item of updatePasswordErrors\" :key=\"item\"> {{ $t(`_errorCodes.${item}`) }}</span>\n            </div>\n          </div>\n        </div>\n        <div class=\"right-block\">\n          <div class=\"grey-area\">\n            <p>\n              {{ $t('_companyDetails.passwordConsistOf') }}\n            </p>\n            <ul>\n              <li>{{ $t('_companyDetails.8chars') }}</li>\n              <li>{{ $t('_companyDetails.1CapitalLetter') }}</li>\n              <li>{{ $t('_companyDetails.1LowerLetter') }}</li>\n              <li>{{ $t('_companyDetails.1number') }}</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n      <Button @onClick=\"updatePassword\" :text=\"$t('_companyDetails.updatePassword')\" buttonType=\"dark\" />\n    </div>\n  </div>\n  <div class=\"loader-block\" v-else>\n    <Loader />\n  </div>\n  <transition name=\"fade\">\n    <info-popup v-if=\"showPopup\" @closePopup=\"closePopup\">\n      <template v-slot:header>{{ $t('_generalTerms.passwordUpdated') }}</template>\n    </info-popup>\n  </transition>\n</template>\n<script lang=\"ts\">\nimport { defineComponent, ref, computed, reactive, watch, onMounted } from 'vue'\nimport InputElement from '@/components/UI/Input.vue'\nimport Button from '@/components/UI/Button.vue'\nimport Dropdown from '@/components/UI/Dropdown.vue'\nimport { useI18n } from 'vue-i18n'\nimport { useStore } from '@/store'\nimport { AuthActionTypes } from '@/store/auth/actions'\nimport { taxSettingsActionTypes } from '@/store/taxSettings/actions'\nimport Loader from '@/components/UI/Loader.vue'\nimport InfoPopup from '@/components/UI/InfoPopup.vue'\nimport rolesMapping from '@/composables/rolesMapping'\nimport _ from 'lodash'\nexport default defineComponent({\n  name: 'Driver Account Details',\n  setup() {\n    const store = useStore()\n    const { locale, t } = useI18n({ useScope: 'global' })\n    const incomeTaxPercentages = ref([])\n    const selectedIncomeTaxPercentage = ref(`${t('_generalTerms.pleaseSelect')}`)\n    const useOfCarOptions = ref([\n      { label: t('_generalTerms.yes'), value: true },\n      { label: t('_generalTerms.no'), value: false }\n    ])\n    const privateUserMessageVisible = ref(false)\n    const taxMessageVisible = ref(false)\n    const user = computed(() => store.state.auth.currentUser)\n    const roles = computed(() => store.state.auth.currentUser.roles)\n    const getTaxSettingsByYear = computed(() => store.state.taxSettings.getTaxSettingsByYear)\n    const adminClientRole = computed(() => !roles.value.includes('ROLE_EMPLOYEE'))\n    const loader = computed(() => store.state.auth.loader)\n    const showPopup = ref(false)\n    const updatePasswordErrors = computed(() => store.state.auth.passwordErrors)\n    const passwordErrors = reactive({\n      passwordRegex: false,\n      confirmPasswordSame: false,\n      emptyPassword: false,\n      emptyNewPassword: false,\n      emptyConfirmPassword: false,\n      invalidPassword: false\n    })\n\n    const selectPercentage = (payload) => {\n      if (!user.value.incomeTax || (user.value.incomeTax && payload.value !== user.value.incomeTax.id)) {\n        let incomeTaxObj = {}\n        getTaxSettingsByYear.value.incomeTaxSettings.map((item, index) => {\n          if (item.id == payload.value) {\n            incomeTaxObj = Object.assign({}, incomeTaxObj, getTaxSettingsByYear.value.incomeTaxSettings[index])\n          }\n        })\n        const newObj = Object.assign({}, user.value, {\n          incomeTax: incomeTaxObj,\n          leaseValidUntil: user.value.leaseValidUntil && user.value.leaseValidUntil ? user.value.leaseValidUntil : null,\n          carPolicy: user.value.carPolicy ? user.value.carPolicy.id?.toString() : null,\n          leaseCategory: user.value.leaseCategory ? user.value.leaseCategory.id.toString() : null\n        })\n        newObj['roles'] = rolesMapping(user.value.roles)\n        delete newObj['company']\n        store.dispatch(AuthActionTypes.UPDATE_USER, {\n          companyId: user.value.company.id,\n          userId: user.value.id,\n          body: newObj\n        })\n        taxMessageVisible.value = true\n        incomeTaxPercentages.value.map((item) => {\n          if (item.value == payload.value) {\n            selectedIncomeTaxPercentage.value = item.label\n          }\n        })\n      } else {\n        taxMessageVisible.value = false\n      }\n    }\n    const selectUseOfCarOption = (payload) => {\n      if (payload.value !== user.value.privateUse) {\n        const newObj = Object.assign({}, user.value, {\n          leaseValidUntil: user.value.leaseValidUntil && user.value.leaseValidUntil ? user.value.leaseValidUntil : null,\n          carPolicy: user.value.carPolicy ? user.value.carPolicy.id?.toString() : null,\n          leaseCategory: user.value.leaseCategory ? user.value.leaseCategory.id.toString() : null,\n          privateUse: payload.value == 1\n        })\n        delete newObj['company']\n        newObj['roles'] = rolesMapping(user.value.roles)\n        store.dispatch(AuthActionTypes.UPDATE_USER, {\n          companyId: user.value.company.id,\n          userId: user.value.id,\n          body: newObj\n        })\n        privateUserMessageVisible.value = true\n      } else {\n        privateUserMessageVisible.value = false\n      }\n    }\n    const passwordFields = ref({\n      oldPassword: '',\n      newPassword: '',\n      confirmPassword: ''\n    })\n    const updateExistingPassword = (value) => {\n      passwordFields.value['oldPassword'] = value\n    }\n    const updateNewPassword = (value) => {\n      passwordFields.value['newPassword'] = value\n    }\n    const updateRepeatNewPassword = (value) => {\n      passwordFields.value['confirmPassword'] = value\n    }\n\n    const closePopup = () => {\n      showPopup.value = !showPopup.value\n    }\n\n    const updatePassword = async () => {\n      const regex = /(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,}$/\n      passwordErrors.passwordRegex = false\n      passwordErrors.confirmPasswordSame = false\n      passwordErrors.emptyPassword = false\n      passwordErrors.emptyConfirmPassword = false\n      passwordErrors.emptyNewPassword = false\n      passwordErrors.invalidPassword = false\n\n      if (passwordFields.value.oldPassword === '') {\n        passwordErrors.emptyPassword = true\n      }\n      if (passwordFields.value.newPassword === '') {\n        passwordErrors.emptyNewPassword = true\n      }\n      if (passwordFields.value.confirmPassword === '') {\n        passwordErrors.emptyConfirmPassword = true\n      }\n      if (passwordFields.value.newPassword !== passwordFields.value.confirmPassword) {\n        passwordErrors.confirmPasswordSame = true\n      }\n      if (!regex.test(passwordFields.value.newPassword)) {\n        passwordErrors.invalidPassword = true\n      }\n      if (Object.values(passwordErrors).every((v) => v === false)) {\n        const res = await store.dispatch(AuthActionTypes.UPDATE_PASSWORD, {\n          id: +user.value.id,\n          body: passwordFields.value\n        })\n        if (res.status === 'success') {\n          showPopup.value = true\n        }\n      }\n    }\n    const getIncometaxPercentage = () => {\n      if (getTaxSettingsByYear.value.incomeTaxSettings.length) {\n        getTaxSettingsByYear.value.incomeTaxSettings.map((item, index) => {\n          let showLabel = ''\n          if (getTaxSettingsByYear.value.incomeTaxSettings[index + 1]) {\n            showLabel =\n              '€ ' + item.fromValue + ' - € ' + (getTaxSettingsByYear.value.incomeTaxSettings[index + 1].fromValue - 1)\n          } else {\n            showLabel = '> € ' + item.fromValue\n          }\n          if (user.value.incomeTax && item.id == user.value.incomeTax.id) selectedIncomeTaxPercentage.value = showLabel\n          incomeTaxPercentages.value.push({ label: showLabel, value: item.id })\n        })\n      }\n    }\n\n    onMounted(async () => {\n      await store.dispatch(taxSettingsActionTypes.GET_TAXSETTINGS, { year: new Date().getFullYear() })\n      getIncometaxPercentage()\n    })\n    watch(\n      () => _.cloneDeep(locale.value),\n      () => {\n        useOfCarOptions.value = [\n          { label: t('_generalTerms.yes'), value: true },\n          { label: t('_generalTerms.no'), value: false }\n        ]\n        getIncometaxPercentage()\n      }\n    )\n    return {\n      incomeTaxPercentages,\n      selectPercentage,\n      passwordFields,\n      updateExistingPassword,\n      updateNewPassword,\n      updateRepeatNewPassword,\n      useOfCarOptions,\n      selectUseOfCarOption,\n      user,\n      loader,\n      privateUserMessageVisible,\n      taxMessageVisible,\n      updatePassword,\n      passwordErrors,\n      updatePasswordErrors,\n      closePopup,\n      showPopup,\n      adminClientRole,\n      selectedIncomeTaxPercentage\n    }\n  },\n  components: {\n    InputElement,\n    Button,\n    Dropdown,\n    Loader,\n    InfoPopup\n  }\n})\n</script>\n<style lang=\"sass\" scoped>\n@import 'sass/all.sass'\n.loader-block\n  display: flex\n  flex: 1\n  justify-content: space-around\n.driver-account\n.right-area\n  .details-inner-wrap\n    margin: 0 0 3em 0\n    h2\n      @media screen and (max-width: $mdBreakpoint)\n        margin: 1.4em 0 1.4em 0\n    .company-info-wrap\n      .left-block\n        flex: 2\n        .company-info\n          .row\n            .half-width\n              position: relative\n              margin-right: 5%\n              @media screen and (max-width: $mdBreakpoint)\n                margin-bottom: 2em\n              label\n                font-size: 14px\n                color: $colorHubbleDarkGrey\n                display: flex\n                margin-bottom: 0.4em\n              .dropdown\n                margin-left: 0\n    .lease-section\n      padding-bottom: 3.5em\n    .update-password-section\n    @media screen and (min-width: $mdBreakpoint)\n      padding: 0 3em 5em 3em\n      .half-width\n        width: 45%\n    .company-info-wrap\n      @media screen and (max-width: $mdBreakpoint)\n        margin: 0 0 2em 0\n.green-text\n  color: $colorHubbleDarkGreen\n  font-size: 14px\n  margin-top: 2%\n.error-block\n  position: relative\n  color: red\n  margin: 1rem 0\n  font-size: 14px\n.wide\n  width: max-content\n</style>\n"]}]}